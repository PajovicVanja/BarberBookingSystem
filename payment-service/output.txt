=== cmd\payment-service\main.go ===
package main

import (
	"log"
	"paymentservice/internal/config"
	"paymentservice/internal/handlers"
	"paymentservice/internal/messaging"
	"paymentservice/internal/middleware"
	"paymentservice/internal/repository"
	"paymentservice/internal/services"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger" 
	"github.com/swaggo/gin-swagger/swaggerFiles"
	_ "paymentservice/docs"
	_ "github.com/go-sql-driver/mysql" 
)

func main() {
	// Load configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("could not load config: %v", err)
	}

	// Initialize MySQL database connection
	db, err := repository.NewMySQLDB(cfg.DatabaseDSN)
	if err != nil {
		log.Fatalf("could not connect to database: %v", err)
	}
	defer db.Close()

	// Initialize RabbitMQ connection (for publishing)
	mq, err := messaging.NewRabbitMQClient(cfg.RabbitMQURL)
	if err != nil {
		log.Fatalf("could not connect to RabbitMQ: %v", err)
	}
	defer mq.Close()

	// Start the reservation consumer in the Payment Service (if needed)
	// For example, listening on a "reservation_notifications" queue.
	go messaging.StartReservationConsumer(cfg.RabbitMQURL, "reservation_notifications")

	// Create repository and service layer instances
	paymentRepo := repository.NewPaymentRepository(db)
	paymentService := services.NewPaymentService(paymentRepo, mq)

	// Set up Gin engine with logging middleware
	r := gin.Default()
	r.Use(middleware.Logger())

	// Register payment routes with Swagger documentation available at /swagger/index.html
	handlers.RegisterPaymentRoutes(r, paymentService)
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	log.Printf("Starting server on port %s", cfg.ServerPort)
	r.Run(":" + cfg.ServerPort)
}


=== internal\config\config.go ===
package config

import "os"

type Config struct {
	ServerPort  string
	DatabaseDSN string
	RabbitMQURL string
}

// LoadConfig loads configuration from environment variables.
func LoadConfig() (*Config, error) {
	cfg := &Config{
		ServerPort:  getEnv("SERVER_PORT", "8080"),
		DatabaseDSN: getEnv("DATABASE_DSN", "root:root@tcp(localhost:3306)/paymentdb"),
		RabbitMQURL: getEnv("RABBITMQ_URL", "amqp://guest:guest@localhost:5672/"),
	}
	return cfg, nil
}

func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultValue
}


=== internal\handlers\payment_handler.go ===
package handlers

import (
	"net/http"
	"strconv"
	"paymentservice/internal/models"
	"paymentservice/internal/services"

	"github.com/gin-gonic/gin"
)

// PaymentHandler handles payment-related HTTP requests.
type PaymentHandler struct {
	service services.PaymentService
}

// RegisterPaymentRoutes registers payment endpoints.
func RegisterPaymentRoutes(r *gin.Engine, service services.PaymentService) {
	handler := &PaymentHandler{
		service: service,
	}

	paymentGroup := r.Group("/api/payments")
	{
		paymentGroup.POST("", handler.ProcessPayment)
		paymentGroup.GET("/:id", handler.GetPaymentByID)
		paymentGroup.GET("/user/:id", handler.GetPaymentsByUser)
		paymentGroup.POST("/webhook", handler.HandleWebhook)
	}
}

// ProcessPayment godoc
// @Summary Process a new payment
// @Description Process a new payment for a booking
// @Tags payments
// @Accept json
// @Produce json
// @Param payment body models.Payment true "Payment Information"
// @Success 200 {object} models.Payment
// @Failure 400 {object} map[string]interface{}
// @Router /api/payments [post]
func (h *PaymentHandler) ProcessPayment(c *gin.Context) {
	var payment models.Payment
	if err := c.ShouldBindJSON(&payment); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := h.service.ProcessPayment(&payment); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, payment)
}

// GetPaymentByID godoc
// @Summary Get payment details by ID
// @Description Retrieve payment details by payment ID
// @Tags payments
// @Produce json
// @Param id path int true "Payment ID"
// @Success 200 {object} models.Payment
// @Failure 404 {object} map[string]interface{}
// @Router /api/payments/{id} [get]
func (h *PaymentHandler) GetPaymentByID(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid payment ID"})
		return
	}

	payment, err := h.service.GetPaymentByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "payment not found"})
		return
	}

	c.JSON(http.StatusOK, payment)
}

// GetPaymentsByUser godoc
// @Summary Get payment history for a user
// @Description Retrieve all payments for a specific user
// @Tags payments
// @Produce json
// @Param id path int true "User ID"
// @Success 200 {array} models.Payment
// @Failure 404 {object} map[string]interface{}
// @Router /api/payments/user/{id} [get]
func (h *PaymentHandler) GetPaymentsByUser(c *gin.Context) {
	idStr := c.Param("id")
	userID, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid user ID"})
		return
	}

	payments, err := h.service.GetPaymentsByUser(userID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "no payments found for user"})
		return
	}

	c.JSON(http.StatusOK, payments)
}

// HandleWebhook godoc
// @Summary Handle payment gateway webhooks
// @Description Process webhook notifications from the payment gateway
// @Tags payments
// @Accept json
// @Produce json
// @Param payload body map[string]interface{} true "Webhook Payload"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Router /api/payments/webhook [post]
func (h *PaymentHandler) HandleWebhook(c *gin.Context) {
	var payload map[string]interface{}
	if err := c.ShouldBindJSON(&payload); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := h.service.HandleWebhook(payload); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": "webhook processed"})
}


=== internal\messaging\consumer.go ===
package messaging

import (
	"encoding/json"
	"log"
	"time"

	"github.com/streadway/amqp"
)

// ReservationNotification represents the payload for a reservation update.
type ReservationNotification struct {
	ReservationID string `json:"reservation_id"`
	Status        string `json:"status"`
}

// StartReservationConsumer connects to RabbitMQ and listens on a dedicated queue.
func StartReservationConsumer(rabbitMQURL, queueName string) {
	for {
		conn, err := amqp.Dial(rabbitMQURL)
		if err != nil {
			log.Printf("Failed to connect to RabbitMQ: %v", err)
			time.Sleep(5 * time.Second)
			continue
		}

		ch, err := conn.Channel()
		if err != nil {
			log.Printf("Failed to open a channel: %v", err)
			conn.Close()
			time.Sleep(5 * time.Second)
			continue
		}

		// Declare the queue
		q, err := ch.QueueDeclare(
			queueName, // name of the queue
			true,      // durable
			false,
			false,
			false,
			nil,
		)
		if err != nil {
			log.Printf("Failed to declare queue: %v", err)
			ch.Close()
			conn.Close()
			time.Sleep(5 * time.Second)
			continue
		}

		msgs, err := ch.Consume(
			q.Name,
			"",
			false, // manual ack
			false,
			false,
			false,
			nil,
		)
		if err != nil {
			log.Printf("Failed to register consumer: %v", err)
			ch.Close()
			conn.Close()
			time.Sleep(5 * time.Second)
			continue
		}

		log.Printf("Reservation consumer started on queue: %s", q.Name)
		// Process messages in a goroutine.
		forever := make(chan bool)
		go func() {
			for d := range msgs {
				log.Printf("üîî Raw message body: %s", d.Body) // üëà ADD THIS
			
				var notification ReservationNotification
				if err := json.Unmarshal(d.Body, &notification); err != nil {
					log.Printf("‚ùå Error decoding message: %v", err)
					d.Nack(false, true)
					continue
				}
				log.Printf("‚úÖ Received reservation notification: %+v", notification)
				d.Ack(false)
			}
		}()
		<-forever // Block until something goes wrong
		// If the consumer loop ends, close resources and try reconnecting.
		ch.Close()
		conn.Close()
		log.Println("Consumer disconnected; reconnecting in 5 seconds...")
		time.Sleep(5 * time.Second)
	}
}


=== internal\messaging\rabbitmq.go ===
package messaging

import (
	"encoding/json"

	"github.com/streadway/amqp"
)

// MessageQueue is an interface for message publishing.
type MessageQueue interface {
	Publish(routingKey string, message interface{}) error
	Close() error
}

type rabbitMQClient struct {
	conn    *amqp.Connection
	channel *amqp.Channel
}

// NewRabbitMQClient creates a new RabbitMQ client.
func NewRabbitMQClient(url string) (MessageQueue, error) {
	conn, err := amqp.Dial(url)
	if err != nil {
		return nil, err
	}
	ch, err := conn.Channel()
	if err != nil {
		return nil, err
	}
	return &rabbitMQClient{
		conn:    conn,
		channel: ch,
	}, nil
}

// Publish sends a message to the specified routing key.
func (r *rabbitMQClient) Publish(routingKey string, message interface{}) error {
	body, err := json.Marshal(message)
	if err != nil {
		return err
	}
	return r.channel.Publish(
		"", // default exchange
		routingKey,
		false,
		false,
		amqp.Publishing{
			ContentType: "application/json",
			Body:        body,
		},
	)
}

// Close cleans up the RabbitMQ connection.
func (r *rabbitMQClient) Close() error {
	if err := r.channel.Close(); err != nil {
		return err
	}
	return r.conn.Close()
}


=== internal\middleware\logging.go ===
package middleware

import (
	"log"
	"time"

	"github.com/gin-gonic/gin"
)

// Logger is a middleware that logs each request's status, latency, and path.
func Logger() gin.HandlerFunc {
	return func(c *gin.Context) {
		start := time.Now()
		c.Next()
		latency := time.Since(start)
		status := c.Writer.Status()
		log.Printf("Status: %d | Latency: %v | Path: %s", status, latency, c.Request.URL.Path)
	}
}


=== internal\models\payment.go ===
package models

import "time"

// Payment represents a payment record.
type Payment struct {
	ID            int64     `json:"id" db:"id"`
	UserID        int64     `json:"user_id" db:"user_id"`
	ReservationID int64     `json:"reservation_id" db:"reservation_id"`
	Amount        float64   `json:"amount" db:"amount"`
	Status        string    `json:"status" db:"status"`
	PaymentMethod string    `json:"payment_method" db:"payment_method"`
	CreatedAt     time.Time `json:"created_at" db:"created_at"`
}


=== internal\repository\payment_repository.go ===
package repository

import (
	"database/sql"
	"paymentservice/internal/models"
	"time"
)

type PaymentRepository interface {
	Create(payment *models.Payment) error
	GetByID(id int64) (*models.Payment, error)
	GetByUserID(userID int64) ([]*models.Payment, error)
}

type paymentRepository struct {
	db *sql.DB
}

func NewPaymentRepository(db *sql.DB) PaymentRepository {
	return &paymentRepository{db: db}
}

// Create inserts a new payment record into the database.
func (r *paymentRepository) Create(payment *models.Payment) error {
	query := "INSERT INTO payments (user_id, reservation_id, amount, status, payment_method, created_at) VALUES (?, ?, ?, ?, ?, ?)"
	result, err := r.db.Exec(query, payment.UserID, payment.ReservationID, payment.Amount, payment.Status, payment.PaymentMethod, time.Now())
	if err != nil {
		return err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return err
	}
	payment.ID = id
	return nil
}

// GetByID retrieves a payment record by its ID.
func (r *paymentRepository) GetByID(id int64) (*models.Payment, error) {
	query := "SELECT id, user_id, reservation_id, amount, status, payment_method, created_at FROM payments WHERE id = ?"
	row := r.db.QueryRow(query, id)
	var payment models.Payment
	err := row.Scan(&payment.ID, &payment.UserID, &payment.ReservationID, &payment.Amount, &payment.Status, &payment.PaymentMethod, &payment.CreatedAt)
	if err != nil {
		return nil, err
	}
	return &payment, nil
}

// GetByUserID retrieves all payment records for a given user.
func (r *paymentRepository) GetByUserID(userID int64) ([]*models.Payment, error) {
	query := "SELECT id, user_id, reservation_id, amount, status, payment_method, created_at FROM payments WHERE user_id = ?"
	rows, err := r.db.Query(query, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var payments []*models.Payment
	for rows.Next() {
		var payment models.Payment
		err := rows.Scan(&payment.ID, &payment.UserID, &payment.ReservationID, &payment.Amount, &payment.Status, &payment.PaymentMethod, &payment.CreatedAt)
		if err != nil {
			return nil, err
		}
		payments = append(payments, &payment)
	}
	return payments, nil
}

// NewMySQLDB creates and pings a MySQL database connection.
func NewMySQLDB(dsn string) (*sql.DB, error) {
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		return nil, err
	}
	if err := db.Ping(); err != nil {
		return nil, err
	}
	return db, nil
}


=== internal\services\payment_service.go ===
package services

import (
	"errors"
	"paymentservice/internal/messaging"
	"paymentservice/internal/models"
	"paymentservice/internal/repository"
)

type PaymentService interface {
	ProcessPayment(payment *models.Payment) error
	GetPaymentByID(id int64) (*models.Payment, error)
	GetPaymentsByUser(userID int64) ([]*models.Payment, error)
	HandleWebhook(data map[string]interface{}) error
}

type paymentService struct {
	repo repository.PaymentRepository
	mq   messaging.MessageQueue
}

func NewPaymentService(repo repository.PaymentRepository, mq messaging.MessageQueue) PaymentService {
	return &paymentService{
		repo: repo,
		mq:   mq,
	}
}

// ProcessPayment validates the reservation asynchronously,
// processes the payment, saves it to the DB, and publishes an event.
func (s *paymentService) ProcessPayment(payment *models.Payment) error {
	// Simulate asynchronous validation with the Reservation Service.
	valid := make(chan bool)
	go func() {
		// In a real system, you would perform an HTTP call or similar.
		valid <- true
	}()
	if !<-valid {
		return errors.New("invalid reservation")
	}

	// Process the payment (simulate success).
	payment.Status = "success"

	// Save the payment record in the database.
	if err := s.repo.Create(payment); err != nil {
		return err
	}

	// Publish the processed payment event asynchronously.
	go func(p models.Payment) {
		if err := s.mq.Publish("payment.processed", p); err != nil {
			// In production, log the error appropriately.
		}
	}(*payment)

	return nil
}

func (s *paymentService) GetPaymentByID(id int64) (*models.Payment, error) {
	return s.repo.GetByID(id)
}

func (s *paymentService) GetPaymentsByUser(userID int64) ([]*models.Payment, error) {
	return s.repo.GetByUserID(userID)
}

func (s *paymentService) HandleWebhook(data map[string]interface{}) error {
	// Process webhook data.
	// For example, update payment status based on webhook event.
	return nil
}


=== tests\payment_handler_test.go ===
package tests

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"paymentservice/internal/handlers"
	"paymentservice/internal/models"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

// mockPaymentService implements the PaymentService interface for testing.
type mockPaymentService struct{}

func (m *mockPaymentService) ProcessPayment(payment *models.Payment) error {
	payment.ID = 1
	return nil
}

func (m *mockPaymentService) GetPaymentByID(id int64) (*models.Payment, error) {
	return &models.Payment{
		ID:            id,
		UserID:        1,
		ReservationID: 1,
		Amount:        100.0,
		Status:        "success",
		PaymentMethod: "credit_card",
	}, nil
}

func (m *mockPaymentService) GetPaymentsByUser(userID int64) ([]*models.Payment, error) {
	return []*models.Payment{
		{
			ID:            1,
			UserID:        userID,
			ReservationID: 1,
			Amount:        100.0,
			Status:        "success",
			PaymentMethod: "credit_card",
		},
	}, nil
}

func (m *mockPaymentService) HandleWebhook(data map[string]interface{}) error {
	return nil
}

func TestProcessPayment(t *testing.T) {
	gin.SetMode(gin.TestMode)
	r := gin.Default()
	service := &mockPaymentService{}
	handlers.RegisterPaymentRoutes(r, service)

	payment := models.Payment{
		UserID:        1,
		ReservationID: 1,
		Amount:        100.0,
		PaymentMethod: "credit_card",
	}
	jsonValue, _ := json.Marshal(payment)
	req, _ := http.NewRequest("POST", "/api/payments", bytes.NewBuffer(jsonValue))
	req.Header.Set("Content-Type", "application/json")
	resp := httptest.NewRecorder()
	r.ServeHTTP(resp, req)

	assert.Equal(t, 200, resp.Code)
	var respPayment models.Payment
	json.Unmarshal(resp.Body.Bytes(), &respPayment)
	assert.Equal(t, int64(1), respPayment.ID)
}

func TestGetPaymentByID(t *testing.T) {
	gin.SetMode(gin.TestMode)
	r := gin.Default()
	service := &mockPaymentService{}
	handlers.RegisterPaymentRoutes(r, service)

	req, _ := http.NewRequest("GET", "/api/payments/1", nil)
	resp := httptest.NewRecorder()
	r.ServeHTTP(resp, req)

	assert.Equal(t, 200, resp.Code)
	var payment models.Payment
	json.Unmarshal(resp.Body.Bytes(), &payment)
	assert.Equal(t, int64(1), payment.ID)
}

func TestGetPaymentsByUser(t *testing.T) {
	gin.SetMode(gin.TestMode)
	r := gin.Default()
	service := &mockPaymentService{}
	handlers.RegisterPaymentRoutes(r, service)

	req, _ := http.NewRequest("GET", "/api/payments/user/1", nil)
	resp := httptest.NewRecorder()
	r.ServeHTTP(resp, req)

	assert.Equal(t, 200, resp.Code)
	var payments []models.Payment
	json.Unmarshal(resp.Body.Bytes(), &payments)
	assert.Equal(t, 1, len(payments))
}

func TestHandleWebhook(t *testing.T) {
	gin.SetMode(gin.TestMode)
	r := gin.Default()
	service := &mockPaymentService{}
	handlers.RegisterPaymentRoutes(r, service)

	payload := map[string]interface{}{
		"event": "payment.updated",
	}
	jsonValue, _ := json.Marshal(payload)
	req, _ := http.NewRequest("POST", "/api/payments/webhook", bytes.NewBuffer(jsonValue))
	req.Header.Set("Content-Type", "application/json")
	resp := httptest.NewRecorder()
	r.ServeHTTP(resp, req)

	assert.Equal(t, 200, resp.Code)
}


=== go.mod ===
module paymentservice

go 1.21.0

toolchain go1.24.1

require (
	github.com/gin-gonic/gin v1.7.7
	github.com/go-sql-driver/mysql v1.9.1
	github.com/streadway/amqp v1.0.0
	github.com/stretchr/testify v1.7.0
	github.com/swaggo/gin-swagger v1.3.1
	github.com/swaggo/swag v1.16.3
)

require (
	filippo.io/edwards25519 v1.1.0 // indirect
	github.com/KyleBanks/depth v1.2.1 // indirect
	github.com/PuerkitoBio/purell v1.1.1 // indirect
	github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect
	github.com/davecgh/go-spew v1.1.1 // indirect
	github.com/gin-contrib/sse v0.1.0 // indirect
	github.com/go-openapi/jsonpointer v0.19.5 // indirect
	github.com/go-openapi/jsonreference v0.19.6 // indirect
	github.com/go-openapi/spec v0.20.4 // indirect
	github.com/go-openapi/swag v0.19.15 // indirect
	github.com/go-playground/locales v0.13.0 // indirect
	github.com/go-playground/universal-translator v0.17.0 // indirect
	github.com/go-playground/validator/v10 v10.4.1 // indirect
	github.com/golang/protobuf v1.3.3 // indirect
	github.com/josharian/intern v1.0.0 // indirect
	github.com/json-iterator/go v1.1.9 // indirect
	github.com/leodido/go-urn v1.2.0 // indirect
	github.com/mailru/easyjson v0.7.6 // indirect
	github.com/mattn/go-isatty v0.0.12 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.1 // indirect
	github.com/pmezard/go-difflib v1.0.0 // indirect
	github.com/ugorji/go/codec v1.1.13 // indirect
	golang.org/x/crypto v0.14.0 // indirect
	golang.org/x/net v0.17.0 // indirect
	golang.org/x/sys v0.13.0 // indirect
	golang.org/x/text v0.13.0 // indirect
	golang.org/x/tools v0.7.0 // indirect
	gopkg.in/yaml.v2 v2.4.0 // indirect
	gopkg.in/yaml.v3 v3.0.0 // indirect
)


