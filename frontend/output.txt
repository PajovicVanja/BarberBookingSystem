=== container\package.json ===
{
    "name": "container",
    "version": "1.0.0",
    "private": true,
    "scripts": {
      "start": "webpack serve --env PORT=3001 --open",
      "build": "webpack --mode production"
    },
    "dependencies": {
      "react": "^18.3.0",
      "react-dom": "^18.3.0",
      "react-router-dom": "^6.23.0"
    },
    "devDependencies": {
      "@babel/core": "^7.24.5",
      "@babel/preset-react": "^7.24.5",
      "babel-loader": "^9.1.4",
      "html-webpack-plugin": "^5.5.3",
      "webpack": "^5.92.0",
      "webpack-cli": "^5.1.4",
      "webpack-dev-server": "^4.15.2"
    }
  }
  

=== container\public\index.html ===
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Barber Booking – Web UI</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


=== container\src\bootstrap.js ===
import React, { Suspense, lazy } from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Routes, Route, Navigate, Link } from 'react-router-dom';

const UsersApp        = lazy(() => import('UsersMF/App'));
const ReservationsApp = lazy(() => import('ReservationsMF/App'));
const PaymentsApp     = lazy(() => import('PaymentsMF/App'));

 const Nav = () => {
     const token = localStorage.getItem('token');
     return (
       <nav className="flex gap-6 p-4 shadow-md">
         {!token && <Link to="/users/login">Login</Link>}
         {!token && <Link to="/users/register">Register</Link>}
         { token && <Link to="/users/profile">Profile</Link> }
         <Link to="/reservations">Reservations</Link>
         <Link to="/payments">Payments</Link>
       </nav>
     );
  };

const Shell = () => (
  <BrowserRouter>
    <Nav />
    <Suspense fallback={<p className="p-4">Loading…</p>}>
      <Routes>
        <Route path="/" element={<Navigate to="/users/login" replace />} />
        <Route path="/users/*"        element={<UsersApp />} />
        <Route path="/reservations/*" element={<ReservationsApp />} />
        <Route path="/payments/*"     element={<PaymentsApp />} />
      </Routes>
    </Suspense>
  </BrowserRouter>
);

ReactDOM.createRoot(document.getElementById('root')).render(<Shell />);


=== container\src\index.js ===
// ONLY for standalone dev – single-spa style bootstrap
import('./bootstrap');


=== container\webpack.config.js ===
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;
const path = require('path');

module.exports = (_, argv) => ({
  entry: './src/bootstrap.js',
  mode: argv.mode || 'development',
  devServer: { port: 3001, historyApiFallback: true },
  output: { publicPath: 'auto', clean: true },
  resolve: { extensions: ['.js', '.jsx'] },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: { presets: ['@babel/preset-react'] }
        }
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({ template: './public/index.html' }),
    new ModuleFederationPlugin({
      name: 'container',
      remotes: {
        UsersMF: 'usersMf@http://localhost:3002/remoteEntry.js',
        ReservationsMF: 'reservationsMf@http://localhost:3003/remoteEntry.js',
        PaymentsMF: 'paymentsMf@http://localhost:3004/remoteEntry.js'
      },
      shared: {
        react:      { singleton: true, eager: true, requiredVersion: false },
        'react-dom':{ singleton: true, eager: true, requiredVersion: false },
        'react-router-dom': { singleton: true, eager: true, requiredVersion: false }
      }
    })
  ]
});


=== payments-mf\package.json ===
{
    "name": "payments-mf",
    "version": "1.0.0",
    "private": true,
    "scripts": {
      "start": "webpack serve --env PORT=3004 --open", 
      "build": "webpack --mode production"
    },
    "dependencies": {
      "axios": "^1.8.0",
      "react": "^18.3.0",
      "react-dom": "^18.3.0",
      "react-router-dom": "^6.23.0"
    },
    "devDependencies": {
      "@babel/core": "^7.24.5",
      "@babel/preset-react": "^7.24.5",
      "babel-loader": "^9.1.4",
      "html-webpack-plugin": "^5.5.3",
      "webpack": "^5.92.0",
      "webpack-cli": "^5.1.4",
      "webpack-dev-server": "^4.15.2"
    }
  }
  

=== payments-mf\public\index.html ===
<!doctype html><html lang="en"><head><meta charset="utf-8"><title>payments MF</title></head>
<body><div id="root"></div></body></html>


=== payments-mf\src\App.js ===
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Routes, Route } from 'react-router-dom';

// point at your web gateway
const paymentsApi = axios.create({
  baseURL: 'http://localhost:4000/api/payments',
});
const reservationsApi = axios.create({
  baseURL: 'http://localhost:4000/api/reservations',
});

// helper to decode JWT payload
function decodeToken(token) {
  try {
    return JSON.parse(atob(token.split('.')[1]));
  } catch {
    return {};
  }
}

function CreatePayment() {
  const token = localStorage.getItem('token');
  const { id: user_id } = decodeToken(token);
  const [reservations, setReservations] = useState([]);
  const [form, setForm] = useState({
    user_id: user_id || '',
    reservation_id: '',
    amount: '',
    payment_method: 'cash',
  });

  useEffect(() => {
    if (user_id) {
      reservationsApi
        .get(`/user/${user_id}`)
        .then(res => {
          // only show accepted
          setReservations(res.data.filter(r => r.status === 'accepted'));
        })
        .catch(console.error);

      setForm(f => ({ ...f, user_id }));
    }
  }, [user_id]);

  const handleSubmit = async e => {
    e.preventDefault();
    const payload = {
      user_id:        Number(form.user_id),
      reservation_id: form.reservation_id,
      amount:         parseFloat(form.amount),
      payment_method: form.payment_method,
    };

    try {
      const res = await paymentsApi.post(
        '',
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert('Payment processed: ' + JSON.stringify(res.data));
    } catch (err) {
      console.error('❌ Payment error response:', err.response?.data || err);
      alert('Failed to process payment:\n' +
            JSON.stringify(err.response?.data, null, 2));
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Create Payment</h2>
      <p><strong>User:</strong> {user_id}</p>

      <label>
        Reservation:
        <select
          value={form.reservation_id}
          onChange={e => setForm({ ...form, reservation_id: e.target.value })}
          required
        >
          <option value="">— choose reservation —</option>
          {reservations.map(r => (
            <option key={r.id} value={r.id}>
              {new Date(r.appointment_time).toLocaleString()} ({r.status})
            </option>
          ))}
        </select>
      </label>

      <label>
        Amount (€):
        <input
          type="number"
          value={form.amount}
          onChange={e => setForm({ ...form, amount: e.target.value })}
          required
        />
      </label>

      <label>
        Method:
        <select
          value={form.payment_method}
          onChange={e =>
            setForm({ ...form, payment_method: e.target.value })
          }
        >
          <option value="cash">Cash</option>
          <option value="credit_card">Credit Card</option>
        </select>
      </label>

      <button type="submit">Pay</button>
    </form>
  );
}

function ListPayments() {
  const token = localStorage.getItem('token');
  const { id: user_id } = decodeToken(token);
  const [payments, setPayments] = useState([]);

  useEffect(() => {
    if (user_id) {
      paymentsApi
        .get(`/user/${user_id}`, { headers: { Authorization: `Bearer ${token}` } })
        .then(res => setPayments(res.data))
        .catch(console.error);
    }
  }, [user_id]);

  return (
    <div>
      <h2>My Payments</h2>
      <ul>
        {payments.map(p => (
          <li key={p.id}>
            €{p.amount.toFixed(2)} — {p.status} (
            {new Date(p.created_at).toLocaleString()})
          </li>
        ))}
      </ul>
    </div>
  );
}

function BarberPayments() {
  const token = localStorage.getItem('token');
  const { id: user_id, role } = decodeToken(token);
  const [payments, setPayments] = useState([]);

  useEffect(() => {
    if (role === 'barber') {
      paymentsApi
        .get(`/barber/${user_id}`, { headers: { Authorization: `Bearer ${token}` } })
        .then(res => setPayments(res.data))
        .catch(console.error);
    }
  }, [user_id, role]);

  return (
    <div>
      <h2>Barber Payments</h2>
      <ul>
        {payments.map(p => (
          <li key={p.id}>
            Customer #{p.user_id} — €{p.amount.toFixed(2)} via {p.payment_method}
            on {new Date(p.created_at).toLocaleString()}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default function App() {
  return (
    <Routes>
      <Route path="/" element={<CreatePayment />} />
      <Route path="list" element={<ListPayments />} />
      <Route path="barber" element={<BarberPayments />} />
    </Routes>
  );
}


=== payments-mf\src\bootstrap.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { BrowserRouter } from 'react-router-dom';

const mount = (el) => {
  ReactDOM.createRoot(el).render(
    <BrowserRouter>
      <App />
    </BrowserRouter>
  );
};

// Export it for Module Federation
export default mount;

// If running standalone (npm start), mount immediately:
if (process.env.NODE_ENV === 'development') {
  const root = document.getElementById('root');
  if (root) {
    mount(root);
  }
}


=== payments-mf\src\index.js ===
import('./bootstrap');


=== payments-mf\webpack.config.js ===
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;
const path = require('path');

module.exports = (_, argv) => ({
  entry: './src/bootstrap.js',
  mode: argv.mode || 'development',
  devServer: { port: 3004, historyApiFallback: true },
  output: { publicPath: 'auto', clean: true },
  resolve: { extensions: ['.js', '.jsx'] },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: { presets: ['@babel/preset-react'] }
        }
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({ template: './public/index.html' }),
    new ModuleFederationPlugin({
      name: 'paymentsMf',
      filename: 'remoteEntry.js',
      exposes: { './App': './src/App' },
      shared: {
          react:      { singleton: true, eager: true, requiredVersion: false },
          'react-dom':{ singleton: true, eager: true, requiredVersion: false },
          'react-router-dom': { singleton: true, eager: true, requiredVersion: false }
      }
    })
  ]
});


=== reservations-mf\package.json ===
{
    "name": "reservations-mf",
    "version": "1.0.0",
    "private": true,
    "scripts": {
      "start": "webpack serve --env PORT=3003 --open", 
      "build": "webpack --mode production"
    },
    "dependencies": {
      "axios": "^1.8.0",
      "react": "^18.3.0",
      "react-dom": "^18.3.0",
      "react-router-dom": "^6.23.0"
    },
    "devDependencies": {
      "@babel/core": "^7.24.5",
      "@babel/preset-react": "^7.24.5",
      "babel-loader": "^9.1.4",
      "html-webpack-plugin": "^5.5.3",
      "webpack": "^5.92.0",
      "webpack-cli": "^5.1.4",
      "webpack-dev-server": "^4.15.2"
    }
  }
  

=== reservations-mf\public\index.html ===
<!doctype html><html lang="en"><head><meta charset="utf-8"><title>reservations MF</title></head>
<body><div id="root"></div></body></html>


=== reservations-mf\src\App.js ===
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Routes, Route } from 'react-router-dom';

// point at your web gateway
const reservationApi = axios.create({
  baseURL: 'http://localhost:4000/api/reservations',
});
const usersApi = axios.create({
  baseURL: 'http://localhost:4000/api/users',
});

// helper to decode JWT payload
function decodeToken(token) {
  try {
    return JSON.parse(atob(token.split('.')[1]));
  } catch {
    return {};
  }
}

function CreateReservation() {
  const token = localStorage.getItem('token');
  const { id: user_id } = decodeToken(token);
  const [barbers, setBarbers] = useState([]);
  const [form, setForm] = useState({
    user_id: user_id || '',
    barber_id: '',
    appointment_time: '',
  });

  useEffect(() => {
    if (token) {
      usersApi
        .get('/barbers', { headers: { Authorization: `Bearer ${token}` } })
        .then(res => setBarbers(res.data))
        .catch(console.error);

      setForm(f => ({ ...f, user_id }));
    }
  }, [token, user_id]);

  const handleSubmit = async e => {
    e.preventDefault();
    const payload = {
      // ⚠️ FastAPI expects strings here
      user_id: String(user_id),
      barber_id: String(form.barber_id),
      appointment_time: new Date(form.appointment_time).toISOString(),
    };

    console.log('→ POST /api/reservations payload:', payload);

    try {
      const res = await reservationApi.post(
        '',
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert('Reservation created: ' + JSON.stringify(res.data));
    } catch (err) {
      console.error('❌ Reservation error response:', err.response?.data || err);
      alert('Failed to create reservation:\n' +
            JSON.stringify(err.response?.data, null, 2));
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Create Reservation</h2>
      <p><strong>User:</strong> {user_id}</p>

      <label>
        Barber:
        <select
          value={form.barber_id}
          onChange={e => setForm({ ...form, barber_id: e.target.value })}
          required
        >
          <option value="">— choose barber —</option>
          {barbers.map(b => (
            <option key={b.id} value={b.id}>
              {b.username}
            </option>
          ))}
        </select>
      </label>

      <label>
        Appointment Time:
        <input
          type="datetime-local"
          value={form.appointment_time}
          onChange={e =>
            setForm({ ...form, appointment_time: e.target.value })
          }
          required
        />
      </label>

      <button type="submit">Create</button>
    </form>
  );
}

function ListReservations() {
  const token = localStorage.getItem('token');
  const { id: user_id } = decodeToken(token);
  const [reservations, setReservations] = useState([]);

  useEffect(() => {
    if (user_id) {
      reservationApi
        .get(`/user/${user_id}`, { headers: { Authorization: `Bearer ${token}` } })
        .then(res => setReservations(res.data))
        .catch(console.error);
    }
  }, [user_id, token]);

  return (
    <div>
      <h2>My Reservations</h2>
      <ul>
        {reservations.map(r => (
          <li key={r.id}>
            {new Date(r.appointment_time).toLocaleString()} — {r.status}
            {r.status === 'declined' && (
              <div className="decline-message">{r.message}</div>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

function BarberReservations() {
  const token = localStorage.getItem('token');
  const { id: barber_id } = decodeToken(token);
  const [reservations, setReservations] = useState([]);
  const [msgs, setMsgs] = useState({}); // resId → decline message

  useEffect(() => {
    reservationApi
      .get(`/barber/${barber_id}`, { headers: { Authorization: `Bearer ${token}` } })
      .then(res => setReservations(res.data))
      .catch(console.error);
  }, [barber_id, token]);

  function respond(resId, accept) {
    const message = msgs[resId] || '';
    reservationApi
      .patch(
        `/${resId}`,
        { status: accept ? 'accepted' : 'declined', message },
        { headers: { Authorization: `Bearer ${token}` } }
      )
      .then(() => {
        setReservations(rs =>
          rs.map(r =>
            r.id === resId
              ? { ...r, status: accept ? 'accepted' : 'declined', message }
              : r
          )
        );
      })
      .catch(console.error);
  }

  return (
    <div>
      <h2>Incoming Reservations</h2>
      <ul>
        {reservations.map(r => (
          <li key={r.id}>
            Customer #{r.user_id} —{' '}
            {new Date(r.appointment_time).toLocaleString()} — {r.status}
            {r.status === 'pending' && (
              <>
                <button onClick={() => respond(r.id, true)}>Accept</button>
                <textarea
                  placeholder="Decline message"
                  value={msgs[r.id] || ''}
                  onChange={e =>
                    setMsgs({ ...msgs, [r.id]: e.target.value })
                  }
                />
                <button onClick={() => respond(r.id, false)}>Decline</button>
              </>
            )}
            {r.status === 'declined' && (
              <div className="decline-message">{r.message}</div>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default function App() {
  const token = localStorage.getItem('token');
  const { role } = decodeToken(token);

  return (
    <Routes>
      {role === 'barber' ? (
        <Route path="/" element={<BarberReservations />} />
      ) : (
        <>
          <Route path="/" element={<CreateReservation />} />
          <Route path="list" element={<ListReservations />} />
        </>
      )}
    </Routes>
  );
}


=== reservations-mf\src\bootstrap.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { BrowserRouter } from 'react-router-dom';

const mount = (el) => {
  ReactDOM.createRoot(el).render(
    <BrowserRouter>
      <App />
    </BrowserRouter>
  );
};

// Export it for Module Federation
export default mount;

// If running standalone (npm start), mount immediately:
if (process.env.NODE_ENV === 'development') {
  const root = document.getElementById('root');
  if (root) {
    mount(root);
  }
}


=== reservations-mf\src\index.js ===
import('./bootstrap');


=== reservations-mf\webpack.config.js ===
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;
const path = require('path');

module.exports = (_, argv) => ({
  entry: './src/bootstrap.js',
  mode: argv.mode || 'development',
  devServer: { port: 3003, historyApiFallback: true },
  output: { publicPath: 'auto', clean: true },
  resolve: { extensions: ['.js', '.jsx'] },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: { presets: ['@babel/preset-react'] }
        }
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({ template: './public/index.html' }),
    new ModuleFederationPlugin({
      name: 'reservationsMf',
      filename: 'remoteEntry.js',
      exposes: { './App': './src/App' },
      shared: {
        react:      { singleton: true, eager: true, requiredVersion: false },
        'react-dom':{ singleton: true, eager: true, requiredVersion: false },
        'react-router-dom': { singleton: true, eager: true, requiredVersion: false }
      }
    })
  ]
});


=== users-mf\package.json ===
{
    "name": "users-mf",
    "version": "1.0.0",
    "private": true,
    "scripts": {
      "start": "webpack serve --env PORT=3002 --open", 
      "build": "webpack --mode production"
    },
    "dependencies": {
      "axios": "^1.8.0",
      "react": "^18.3.0",
      "react-dom": "^18.3.0",
      "react-router-dom": "^6.23.0"
    },
    "devDependencies": {
      "@babel/core": "^7.24.5",
      "@babel/preset-react": "^7.24.5",
      "babel-loader": "^9.1.4",
      "html-webpack-plugin": "^5.5.3",
      "webpack": "^5.92.0",
      "webpack-cli": "^5.1.4",
      "webpack-dev-server": "^4.15.2"
    }
  }
  

=== users-mf\public\index.html ===
<!doctype html><html lang="en"><head><meta charset="utf-8"><title>users MF</title></head>
<body><div id="root"></div></body></html>


=== users-mf\src\App.js ===
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Routes, Route, Navigate, useNavigate } from 'react-router-dom';

const api = axios.create({
  baseURL: 'http://localhost:4000/api/users',
});

function Register() {
  const [form, setForm] = useState({ username: '', email: '', password: '', role: 'customer' });
  const navigate = useNavigate();

  const handleSubmit = async e => {
    e.preventDefault();
    await api.post('/register', form);
    alert('Registered! Now login.');
    navigate('/login');    // relative: goes to /users/login
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Register</h2>
      <input placeholder="Username"    onChange={e => setForm({ ...form, username: e.target.value })} required />
      <input placeholder="Email"       onChange={e => setForm({ ...form, email:    e.target.value })} required />
      <input type="password" placeholder="Password" onChange={e => setForm({ ...form, password: e.target.value })} required />
      <select onChange={e => setForm({ ...form, role: e.target.value })}>
        <option value="customer">Customer</option>
        <option value="barber">Barber</option>
      </select>
      <button type="submit">Register</button>
    </form>
  );
}

function Login() {
  const [form, setForm] = useState({ username: '', password: '' });
  const navigate = useNavigate();

  const handleSubmit = async e => {
    e.preventDefault();
    const res = await api.post('/login', form);
    localStorage.setItem('token', res.data.token);
    alert('Login successful');
    navigate('/profile');  // relative: goes to /users/profile
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Login</h2>
      <input placeholder="Username"    onChange={e => setForm({ ...form, username: e.target.value })} required />
      <input type="password" placeholder="Password" onChange={e => setForm({ ...form, password: e.target.value })} required />
      <button type="submit">Login</button>
    </form>
  );
}

function Profile() {
  const [profile, setProfile] = useState(null);
  const token = localStorage.getItem('token');

  useEffect(() => {
    api.get('/profile', { headers: { Authorization: `Bearer ${token}` } })
       .then(res => setProfile(res.data))
       .catch(console.error);
  }, []);

  if (!profile) return <p>Loading...</p>;
  return (
    <div>
      <h2>Profile</h2>
      <p>Username: {profile.username}</p>
      <p>Email:    {profile.email}</p>
      <p>Role:     {profile.role}</p>
    </div>
  );
}

export default function App() {
  return (
    <Routes>
      {/* when at /users      → redirect to /users/login */}
      <Route index       element={<Navigate to="login"    replace />} />

      {/* matches /users/login     */}
      <Route path="login"    element={<Login />} />
      {/* matches /users/register  */}
      <Route path="register" element={<Register />} />
      {/* matches /users/profile   */}
      <Route path="profile"  element={<Profile />} />

      {/* any other /users/* → back to login */}
      <Route path="*" element={<Navigate to="login" replace />} />
    </Routes>
  );
}


=== users-mf\src\bootstrap.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { BrowserRouter } from 'react-router-dom';

const mount = (el) => {
  ReactDOM.createRoot(el).render(
    <BrowserRouter>
      <App />
    </BrowserRouter>
  );
};

// Export it for Module Federation
export default mount;

// If running standalone (npm start), mount immediately:
if (process.env.NODE_ENV === 'development') {
  const root = document.getElementById('root');
  if (root) {
    mount(root);
  }
}


=== users-mf\src\index.js ===
import('./bootstrap');


=== users-mf\webpack.config.js ===
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;
const path = require('path');

module.exports = (_, argv) => ({
  entry: './src/bootstrap.js',
  mode: argv.mode || 'development',
  devServer: { port: 3002, historyApiFallback: true },
  output: { publicPath: 'auto', clean: true },
  resolve: { extensions: ['.js', '.jsx'] },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: { presets: ['@babel/preset-react'] }
        }
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({ template: './public/index.html' }),
    new ModuleFederationPlugin({
      name: 'usersMf',
      filename: 'remoteEntry.js',
      exposes: { './App': './src/App' },
      shared: {
        react:      { singleton: true, eager: true, requiredVersion: false },
        'react-dom':{ singleton: true, eager: true, requiredVersion: false },
        'react-router-dom': { singleton: true, eager: true, requiredVersion: false }
      }
    })
  ]
});


